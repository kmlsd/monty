#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
/**
 * main - entry point
 * @ac: arg count
 * @av: arg vector
 *
 * Return: 0 on success, 1 on error
 */
int is_delim(char c, char *delim);
char **strtow(char *str, char *d);
char **strtok_line(char *line);
int main(int argc, char **argv)
{
        char *line = NULL;
        int i = 0, k = 0;
        char **args = NULL;
        size_t len = 0;
        FILE *fp;

        fp = fopen(argv  [1], "r");
        if (argc < 2)
        {
                printf("plseas re run using \n");
                exit (1);
        }
	printf("fp read step begin her\n");
        while (getline(&line, &len, fp) != -1)
       {
/*                write (1, fp, sizeof(fp)); */
		args = strtok_line(line);
		printf("we are here now\n");
		while (args[i] != NULL)
		{
			printf("%s this args of %d \n", args[i], k);
			free(args[i]);
			free(line);
			k++;
		}
		printf("go to re loop gain");
		free(args);
	}
	free(line);
	fclose(fp);
	return (EXIT_SUCCESS);
}
/**
 * strtok_line - handles and tokenizes the line read from file
 *
 * @line: the line to tokenize
 *
 * Return: tokens as an array of strings
 */

char **strtok_line(char *line)
{
	int i = 0, wc = 0, in = 0;
	char **args = NULL, *d = "\n";

	while (line[i])
	{
		if (line[i] == ' ' || line[i] == '\n' || line[i] == '\t')
			in = 0;
		else if (in == 0)
		{
			in = 1;
			wc++;
		}
		i++;
	}

	args = malloc(sizeof(char *) * (wc + 1));
	if (!args)
		return (NULL);

	
	args = strtow(line, d);
		

	return (args);
}
/**
 * **strtow - splits a string into words. Repeat delimiters are ignored
 * @str: the input string
 * @d: the delimeter string
 * Return: a pointer to an array of strings, or NULL on failure
 */

char **strtow(char *str, char *d)
{
	int i, j, k, m, numwords = 0;
	char **s;

	if (str == NULL || str[0] == 0)
		return (NULL);
	if (!d)
		d = " ";
	for (i = 0; str[i] != '\0'; i++)
		if (!is_delim(str[i], d) && (is_delim(str[i + 1], d) || !str[i + 1]))
			numwords++;

	if (numwords == 0)
		return (NULL);
	s = malloc((1 + numwords) * sizeof(char *));
	if (!s)
		return (NULL);
	for (i = 0, j = 0; j < numwords; j++)
	{
		while (is_delim(str[i], d))
			i++;
		k = 0;
		while (!is_delim(str[i + k], d) && str[i + k])
			k++;
		s[j] = malloc((k + 1) * sizeof(char));
		if (!s[j])
		{
			for (k = 0; k < j; k++)
				free(s[k]);
			free(s);
			return (NULL);
		}
		for (m = 0; m < k; m++)
			s[j][m] = str[i++];
		s[j][m] = 0;
	}
	s[j] = NULL;
	return (s);
}
/**
 * is_delim - checks if character is a delimeter
 * @c: the char to check
 * @delim: the delimeter stringi
 * Return: 1 if true, 0 if false
 */
int is_delim(char c, char *delim)
{
	while (*delim)
		if (*delim++ == c)
			return (1);
	return (0);
}
